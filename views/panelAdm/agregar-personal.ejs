<div class="conatiner-fluid content-inner mt-n5 py-0">
  <div>
    <div class="row">
      <div class="col-xl-8 col-lg-12 mx-auto">
        <div class="card">
          <div class="card-header ">
            <div class="header-title ">
              <h4 class="card-title text-center mt-3">Información Personal</h4>
            </div>
          </div>
          <div class="card-body">
            <!--Form personal-->
            <form id="form-personal" method="POST"  action="/personal/agregar" enctype="multipart/form-data">
              <div class="container">
                <div class="row">
                  <!--Imagen de perfil-->
                  <div class="form-group col-md-12">
                    <div class="profile-img-edit d-flex flex-column align-items-center">
                      <!-- Imagen previa con id para el script -->
                      <img id="profile-img" src="/images/avatars/01.png" alt="profile-pic" class="theme-color-default-img profile-pic rounded-circle avatar-100 mb-2">
                      
                      <!-- Botón de subir imagen -->
                      <label class="btn btn-primary btn-sm rounded-pill d-flex align-items-center mt-2" for="file-upload">
                        <i class="fas fa-upload me-2"></i> Subir Imagen
                        <input class="file-upload d-none" type="file" accept="image/*" id="file-upload" name="imagen">
                      </label>
                    </div>
                  </div>
                  
                  
                  

                  <!-- Primera fila de datos personales -->
                  <div class="form-group col-md-6">
                    <label class="form-label" for="nombre">Nombre:</label>
                    <input type="text" class="form-control" id="nombre" name="nombre" placeholder="Nombre" required>
                  </div>
                  <div class="form-group col-md-6">
                    <label class="form-label" for="apellido">Apellidos:</label>
                    <input type="text" name="apellido" id="apellido" class="form-control" placeholder="Apellidos">
                  </div>
                  <!--Direccion-->
                  <div class="form-group col-md-12">
                    <label class="form-label" for="direccion">Dirección:</label>
                    <input type="text" class="form-control" id="direccion" name="direccion" placeholder="">
                  </div>

                  <!-- Género -->
                  <div class="form-group col-md-5">
                    <label class="form-label">Género:</label>
                    <select name="sexo" class="selectpicker form-control" data-style="py-0">
                      <option>Seleccione Género</option>
                      <option value="M">Masculino</option>
                      <option value="F">Femenino</option>
                    </select>
                  </div>
                  <div class="form-group col-md-7">
                    <label class="form-label" for="correo">Correo:</label>
                    <input type="email" class="form-control" id="correo" name="correo" placeholder="">
                  </div>

                  <!-- RFC y CURP -->
                  <div class="form-group col-md-6">
                    <label class="form-label" for="rfc">RFC:</label>
                    <input type="text" class="form-control" id="rfc" name="rfc" placeholder="">
                  </div>
                  <div class="form-group col-md-6">
                    <label class="form-label" for="curp">CURP:</label>
                    <input type="text" class="form-control" id="curp" name="curp" placeholder="">
                  </div>

                  <!-- Fecha de nacimiento y Teléfono -->
                  <div class="form-group col-md-6">
                    <label class="form-label" for="fecha_nacimiento">Fecha de Nacimiento:</label>
                    <input type="date" class="form-control" id="fecha_nacimiento" name="fecha_nacimiento">
                  </div>
                  <div class="form-group col-md-6">
                    <label class="form-label" for="telefono">Teléfono:</label>
                    <input type="tel" class="form-control" id="telefono" name="telefono" placeholder="Teléfono">
                  </div>

                  
                  
                </div>
              </div>
            </form>

          </div>
        </div>
      </div>
      <div class="col-xl-8 col-lg-8 mx-auto">
        <div class="card">
          <div class="card-header ">
            <div class="header-title">
              <h4 class="card-title text-center mt-3">Información Laboral</h4>
            </div>
          </div>
          <div class="card-body">
            <div class="new-user-info">

              <form id="form-laboral" action="/personal/agregar" method="POST" enctype="multipart/form-data">
              <div class="row">
                <div class="col-12">
                  <h4 class="text-center mt-3 mb-5 text-gray">
                    Selecciona los Detalles del Centro de Trabajo Sección y
                    Zona
                  </h4>
                </div>
                <!-- Campo Sector -->
                <div class="d-flex justify-content-center">
                  <!-- Contenedor de los campos Sector y Zona centrados -->
                  <div class="form-group col-md-4">
                    <label for="sector_id" class="form-label">Sector</label>
                    <select class="form-select" id="sector_id" name="sector_id" required>
                      <option value="">Selecciona un sector</option>
                      <% sectores.forEach(function(sector) { %>
                        <option value="<%= sector.sector_id %>">
                          <%= sector.sector_numero %>
                        </option>
                      <% }); %>
                    </select>
                    <div class="invalid-feedback">
                      Por favor selecciona el sector.
                    </div>
                  </div>
                
                  <div class="form-group col-md-4 ms-3">
                    <label for="zona_id" class="form-label">Zona</label>
                    <select class="form-select mb-3 shadow-none" id="zona_id" name="zona_id" required disabled>
                      <option value="">Selecciona una zona</option>
                    </select>
                    <div class="invalid-feedback">
                      Por favor selecciona la zona.
                    </div>
                  </div>
                </div>
                
                <div class="w-100"></div>
                <!-- Campo Municipio -->
                <div class="col-md-4">
                  <div class="form-group">
                    <label for="municipio_id" class="form-label">Municipio</label>
                    <select class="form-select mb-3 shadow-none" id="municipio_id" name="municipio_id" required
                      disabled>
                      <option value="">Selecciona un municipio</option>
                    </select>
                    <div class="invalid-feedback">
                      Por favor selecciona el municipio.
                    </div>
                  </div>
                </div>
                <!-- Campo Comunidad -->
                <div class="col-md-4">
                  <div class="form-group">
                    <label for="comunidad_id" class="form-label">Comunidad</label>
                    <select class="form-select mb-3 shadow-none" id="comunidad_id" name="comunidad_id" required
                      disabled>
                      <option value="">Selecciona una comunidad</option>
                    </select>
                    <div class="invalid-feedback">
                      Por favor selecciona la comunidad.
                    </div>
                  </div>
                </div>

                <div class="col-md-4">
                  <div class="form-group">
                    <label for="cct_id" class="form-label">Centro de Trabajo</label>
                    <select class="form-select mb-3 shadow-none" id="cct_id" name="cct_id" required>
                      <option value="">Clave CCT</option>
                      <!-- Opciones dinámicas -->
                    </select>
                    <div class="invalid-feedback">
                      Por favor selecciona el centro de trabajo.
                    </div>
                  </div>
                </div>

                <div class="col-MD-4">
                  <h4 class="text-center mt-3 mb-5 text-gray">
                    Selecciona Cargo y Tipo de Organización
                  </h4>
                </div>

                <div class="col-md-4">
                  <div class="form-group">
                    <label for="cargo" class="form-label">Cargo</label>
                    <select class="form-select mb-3 shadow-none" id="cargo" name="cargo"
                      style="max-height: 300px; overflow-y: auto" required>
                      <option value="">Selecciona el cargo</option>
                      <option value="DIRECTOR">Director</option>
                      <option value="SUBDIRECTOR">Subdirector</option>
                      <option value="DOCENTE">Docente</option>
                      <option value="AUXILIAR ADMINISTRATIVO">Auxiliar Administrativo</option>
                      <option value="AUXILIAR DE SERVICIOS">Auxiliar de Servicios</option>
                      <option value="DOCENTE DE APOYO">Docente de apoyo</option>
                      <option value="DOCENTE/ATP">Docente/ATP</option>
                      <option value="VELADOR">Velador</option>
                      <option value="DOCENTE/CAMB/ACT">Docente/CAMB/ACT</option>
                    </select>
                    <div class="invalid-feedback">
                      Por favor selecciona el cargo.
                    </div>
                  </div>
                </div>

                <div class="col-md-4">
                  <div class="form-group">
                    <label for="tipo_direccion" class="form-label">Tipo de Dirección</label>
                    <select class="form-select mb-3 shadow-none" id="tipo_direccion" name="tipo_direccion">
                      <option value="">
                        Selecciona el tipo de dirección
                      </option>
                      <option value="D/COMISIONADO">D/comisionado</option>
                      <option value="D/FRENTE A GRUPO">D/frente a grupo</option>
                      <option value="D/TECNICO">D/técnico</option>
                    </select>
                    <div class="invalid-feedback">
                      Por favor selecciona el tipo de dirección.
                    </div>
                  </div>
                </div>

                <div class="col-md-4">
                  <div class="form-group">
                    <label for="tipo_organizacion" class="form-label">Tipo de Organización</label>
                    <select class="form-select mb-3 shadow-none" id="tipo_organizacion" name="tipo_organizacion"
                      required>
                      <option value=""</option>
                        <option value="UNITARIA">Unitaria</option>
                        <option value="BIDOCENTE">Bidocente</option>
                        <option value="TRIDOCENTE">Tridocente</option>
                        <option value="ORG. COM.">ORG. COM.</option>    
                    </select>
                    <div class="invalid-feedback">
                      Por favor selecciona el tipo de organización.
                    </div>
                  </div>
                </div>
                <div class="col-md-6 mx-auto mt-2">
                  <div class="form-group">
                    <label for="fecha_ingreso" class="form-label">Fecha de Ingreso</label>
                    <input type="date" class="form-control" id="fecha_ingreso" name="fecha_ingreso" />
                    <div class="invalid-feedback">
                      Por favor ingresa la fecha de ingreso.
                    </div>
                  </div>
                </div>
                <div class="col-md-6 mx-auto mt-2">
                  <div class="form-group">
                    <label for="fecha_nombramiento" class="form-label">Fecha de Nombramiento</label>
                    <input type="date" class="form-control" id="fecha_nombramiento" name="fecha_nombramiento" />
                    <div class="invalid-feedback">
                      Por favor ingresa la fecha de nombramiento.
                    </div>
                  </div>
                </div>

                <div class="col-md-4 mx-auto">
                  <div class="form-group">
                    <label for="tipo_entidad" class="form-label">Nivel de gobierno</label>
                    <select class="form-select mb-3 shadow-none" id="tipo_entidad" name="tipo_entidad" >
                      <option value="">Seleccione una opción</option>
                      <option value="ESTATAL">Estatal</option>
                      <option value="FEDERAL">Federal</option>
                    </select>
                    <div class="invalid-feedback">
                      Por favor selecciona la Plaza.
                    </div>
                  </div>
                </div> 

                <div class="col-md-4 mx-auto">
                  <div class="form-group">
                    <label for="Nombramiento" class="form-label">Nombramiento</label>
                    <input type="text" class="form-control mb-3 shadow-none" id="Nombramiento" name="Nombramiento"
                      placeholder="Ingrese el nombramiento"  />
                  </div>
                </div> 
                <div class="w-100"></div>


                <hr>
               
                <button type="submit" class="btn btn-primary col-3 mx-auto mt-2 mb-2 rounded-pill">Guardar</button>
        </form>

              </div>

            </div>
          </div>
        </div>
      </div>
    </div>
</div>


<div class="modal fade" id="modalConfirmarDatos" tabindex="-1" aria-labelledby="modalConfirmarDatosLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <!-- Encabezado -->
      <div class="modal-header">
        <h5 class="modal-title" id="modalConfirmarDatosLabel">Confirmar Datos</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
      </div>
      <!-- Cuerpo -->
      <div class="modal-body">
        <div class="card">
          <div class="card-body">
              <div class="d-flex align-items-center justify-content-center">
                  <div class="d-flex flex-column text-center align-items-center justify-content-between ">
                      <div class="fs-italic">
                          <h5> Regina Miles</h5>
                          <div class="text-muted-50 mb-1">
                              <small>Trainer Expert</small>
                          </div>
                      </div>	
                     
                      <div class="card-profile-progress">
                          <div id="circle-progress-1" class="circle-progress  circle-progress-basic circle-progress-primary" data-min-value="0" data-max-value="100" data-value="80" data-type="percent"></div>
                          <img src="/images/avatars/01.png" alt="User-Profile" class="theme-color-default-img img-fluid rounded-circle card-img">
                      <div class="mt-3 text-center text-muted-50">
                          <p>Slate helps you see how many more days you need</p>
                      </div>
                    
                      <div class="card">
                        <div class="card-header text-center">
                          <div class="header-title text-center">
                            <h4 class="card-title">Datos</h4>
                          </div>
                        </div>
                        <div class="card-body">
                          <div class="iq-timeline0 m-0 d-flex align-items-center justify-content-between position-relative">
                            <ul class="list-inline p-0 m-0" id="datosTimeline">
                              <!-- Los datos se inyectarán aquí desde JavaScript -->
                            </ul>
                          </div>
                        </div>
                      </div>
                     
                  </div>
              </div>
          </div>
          </div>
      </div>
        <!-- Lista de Datos -->
        <div class="mt-4">
          <ul id="datosConfirmacion" class="list-group">
            <!-- Aquí se llenarán dinámicamente los datos -->
          </ul>
        </div>
      </div>
      <!-- Footer -->
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Editar</button>
        <button type="button" id="btnConfirmar" class="btn btn-primary">Confirmar</button>
      </div>
    </div>
  </div>
</div>





<script>
  document.addEventListener("DOMContentLoaded", function () {
    const formPersonal = document.getElementById("form-personal");
    const modalConfirmarDatos = new bootstrap.Modal(document.getElementById("modalConfirmarDatos"));
    const modalNombre = document.getElementById("modalNombre");
    const modalApellidos = document.getElementById("modalApellidos");
    const modalImagen = document.getElementById("modalImagen");
    const datosConfirmacion = document.getElementById("datosConfirmacion");
    const generoSelect = document.querySelector('select[name="sexo"]'); // Selector de género
    const imagenInput = formPersonal.querySelector('input[type="file"]'); // Selector para el input de imagen
    const imagenCampo = document.getElementById("imagen"); // Campo oculto para la imagen
  
    // Evento para mostrar el modal con datos al hacer clic en "Guardar"
    formPersonal.addEventListener("submit", (event) => {
      event.preventDefault(); // Evitar el envío automático del formulario
  
      // Obtener los datos del formulario
      const formData = new FormData(formPersonal);
      const datos = {};
      for (const [key, value] of formData.entries()) {
        datos[key] = value;
      }
  
      // Verificar si se ha subido una imagen
      if (imagenInput.files.length > 0) {
        // Si se sube una imagen, mostrarla y asignarla al campo oculto
        modalImagen.src = URL.createObjectURL(imagenInput.files[0]);
        imagenCampo.value = URL.createObjectURL(imagenInput.files[0]);
      } else {
        // Si no se sube imagen, asignar la imagen predeterminada por género al campo oculto
        if (generoSelect.value === "Masculino") {
          modalImagen.src = "/images/avatars/avatar-default.png"; // Avatar masculino por defecto
          imagenCampo.value = "/images/avatars/avatar-default.png"; // Asignar al campo oculto
        } else if (generoSelect.value === "Femenino") {
          modalImagen.src = "/images/avatars/avatar-mujer-default.png"; // Avatar femenino por defecto
          imagenCampo.value = "/images/avatars/avatar-mujer-default.png"; // Asignar al campo oculto
        } else {
          modalImagen.src = "/images/avatars/01.png"; // Imagen por defecto si no se selecciona género
          imagenCampo.value = "/images/avatars/01.png"; // Asignar al campo oculto
        }
      }
  
      // Llenar el modal con los datos del formulario
      modalNombre.textContent = datos.nombre || "Nombre no proporcionado";
      modalApellidos.textContent = datos.apellido || "Apellidos no proporcionados";
  
      // Crear lista de datos
      datosConfirmacion.innerHTML = ""; // Limpiar contenido previo
      for (const [key, value] of Object.entries(datos)) {
        if (key !== "imagen") { // Evitar mostrar el archivo directamente
          const listItem = document.createElement("li");
          listItem.classList.add("list-group-item");
          listItem.innerHTML = `<strong>${key}:</strong> ${value}`;
          datosConfirmacion.appendChild(listItem);
        }
      }
  
      // Mostrar el modal
      modalConfirmarDatos.show();
    });
  });
  
 </script>
  

<!--Validaciones-->
<script>
  document.addEventListener('DOMContentLoaded', function () {
    const form = document.getElementById('form-personal');
    const guardarButton = document.querySelector('button[type="submit"]');
    const nombreInput = document.getElementById('nombre');
    const apellidoInput = document.getElementById('apellido');
    const rfcInput = document.getElementById('rfc');
    const curpInput = document.getElementById('curp');
    const telefonoInput = document.getElementById('telefono');
    const cargoSelect = document.querySelector('[name="cargo"]');
    const tipoDirectorSelect = document.querySelector('[name="tipo_direccion"]');
    const tipoOrganizacionSelect = document.querySelector('[name="tipo_organizacion"]');

    const validarTexto = (input) => {
      const regex = /^[a-zA-ZÁÉÍÓÚáéíóúÑñ\s]+$/;
      if (!regex.test(input.value.trim())) {
        input.setCustomValidity('Este campo solo puede contener letras.');
        input.classList.add('is-invalid');
      } else {
        input.setCustomValidity('');
        input.classList.remove('is-invalid');
      }
    };

    const validarRFC = (input) => {
      const regex = /^[A-ZÑ&]{3,4}(\d{2})(\d{2})(\d{2})[A-Z\d]{3}$/;
      const fechaNacimientoInput = document.getElementById('fecha_nacimiento');
    
      if (!regex.test(input.value.trim())) {
        input.setCustomValidity('Ingrese un RFC válido.');
        input.classList.add('is-invalid');
        fechaNacimientoInput.value = ''; // Limpiar el campo de fecha si el RFC no es válido
      } else {
        input.setCustomValidity('');
        input.classList.remove('is-invalid');
    
        // Extraer la fecha de nacimiento del RFC
        const match = input.value.match(regex);
        if (match) {
          const year = parseInt(match[1], 10) + (parseInt(match[1], 10) < 50 ? 2000 : 1900);
          const month = match[2];
          const day = match[3];
    
          const fechaNacimiento = `${year}-${month}-${day}`;
          fechaNacimientoInput.value = fechaNacimiento;
        }
      }
    };

    const validarCURP = (input) => {
      const regex = /^[A-Z][AEIOU][A-Z]{2}\d{2}(0[1-9]|1[0-2])(0[1-9]|[12]\d|3[01])[HM](AS|BC|BS|CC|CL|CM|CS|CH|DF|DG|GT|GR|HG|JC|MC|MN|MS|NT|NL|OC|PL|QT|QR|SP|SL|SR|TC|TS|TL|VZ|YN|ZS|NE)[B-DF-HJ-NP-TV-Z]{3}[A-Z\d]\d$/;
      if (!regex.test(input.value.trim())) {
        input.setCustomValidity('Ingrese un CURP válido.');
        input.classList.add('is-invalid');
      } else {
        input.setCustomValidity('');
        input.classList.remove('is-invalid');
      }
    };

    const validarTelefono = (input) => {
      const regex = /^\d{10}$/;
      if (!regex.test(input.value.trim())) {
        input.setCustomValidity('Ingrese un número de teléfono válido (10 dígitos).');
        input.classList.add('is-invalid');
        input.classList.remove('is-valid');
      } else {
        input.setCustomValidity('');
        input.classList.remove('is-invalid');
        input.classList.remove('is-valid');
      }
    };

    const manejarHabilitacionCampos = () => {
      if (cargoSelect.value !== 'DIRECTOR') {
        tipoDirectorSelect.disabled = true;
       
        tipoDirectorSelect.classList.add('is-disabled');
        tipoOrganizacionSelect.classList.add('is-disabled');
      } else {
        tipoDirectorSelect.disabled = false;
        tipoOrganizacionSelect.disabled = false;
        tipoDirectorSelect.classList.remove('is-disabled');
        tipoOrganizacionSelect.classList.remove('is-disabled');
      }
    };

    

    guardarButton.addEventListener('click', function (event) {
      validarTexto(nombreInput);
      validarTexto(apellidoInput);
      validarRFC(rfcInput);
      validarCURP(curpInput);
      validarTelefono(telefonoInput);
      manejarHabilitacionCampos();

      if (!form.checkValidity()) {
        event.preventDefault();
        Swal.fire({
          title: 'Error en el formulario',
          text: 'Por favor, corrija los campos marcados antes de continuar.',
          icon: 'error',
          confirmButtonText: 'Entendido',
        });

        // Resaltar campos inválidos
        form.querySelectorAll(':invalid').forEach((input) => {
          input.classList.add('is-invalid');
        });

        return false;
      }
    });

    cargoSelect.addEventListener('change', manejarHabilitacionCampos);

    nombreInput.addEventListener('input', () => validarTexto(nombreInput));
    apellidoInput.addEventListener('input', () => validarTexto(apellidoInput));
    rfcInput.addEventListener('input', () => validarRFC(rfcInput));
    curpInput.addEventListener('input', () => validarCURP(curpInput));
    telefonoInput.addEventListener('input', () => validarTelefono(telefonoInput));
  });
</script>



<!--carga de ccts-->
<script>
    document.addEventListener("DOMContentLoaded", function () {
      // Seleccionar elementos del DOM
      const sectorSelect = document.getElementById("sector_id");
      const zonaSelect = document.getElementById("zona_id");
      const municipioSelect = document.getElementById("municipio_id");
      const comunidadSelect = document.getElementById("comunidad_id");
      const cctSelect = document.getElementById("cct_id");

      // Deshabilitar selects inicialmente
      zonaSelect.disabled = true;
      municipioSelect.disabled = true;
      comunidadSelect.disabled = true;
      cctSelect.disabled = true;

      // Función para limpiar opciones de un select
      function limpiarOpciones(select, placeholder = "Selecciona una opción") {
        select.innerHTML = `<option value="">${placeholder}</option>`;
      }

      // Cargar Zonas cuando se selecciona un Sector
      sectorSelect.addEventListener("change", async function () {
        const sectorId = this.value;

        if (sectorId) {
          limpiarOpciones(zonaSelect, "Cargando zonas...");
          try {
            const response = await fetch(`/obtener-zonas/${sectorId}`);
            const data = await response.json();

            limpiarOpciones(zonaSelect, "Selecciona una zona");
            data.zonas.forEach(zona => {
              const option = new Option(zona.numero_zona, zona.zona_id);
              zonaSelect.add(option);
            });

            zonaSelect.disabled = false;
          } catch (error) {
            console.error("Error al cargar zonas:", error);
          }
        } else {
          limpiarOpciones(zonaSelect);
          zonaSelect.disabled = true;
        }

        limpiarOpciones(municipioSelect);
        limpiarOpciones(comunidadSelect);
        limpiarOpciones(cctSelect);
        municipioSelect.disabled = true;
        comunidadSelect.disabled = true;
        cctSelect.disabled = true;
      });

      // Cargar Municipios cuando se selecciona una Zona
      zonaSelect.addEventListener("change", async function () {
        const sectorId = sectorSelect.value;
        const zonaId = this.value;

        if (zonaId) {
          limpiarOpciones(municipioSelect, "Cargando municipios...");
          try {
            const response = await fetch(`/obtener_municipios?sectorId=${sectorId}&zonaId=${zonaId}`);
            const data = await response.json();

            limpiarOpciones(municipioSelect, "Selecciona un municipio");
            data.municipios.forEach(municipio => {
              const option = new Option(municipio.nombre_municipio, municipio.municipio_id);
              municipioSelect.add(option);
            });

            municipioSelect.disabled = false;
          } catch (error) {
            console.error("Error al cargar municipios:", error);
          }
        } else {
          limpiarOpciones(municipioSelect);
          municipioSelect.disabled = true;
        }

        limpiarOpciones(comunidadSelect);
        limpiarOpciones(cctSelect);
        comunidadSelect.disabled = true;
        cctSelect.disabled = true;
      });

      // Cargar Comunidades cuando se selecciona un Municipio
      municipioSelect.addEventListener("change", async function () {
        const sectorId = sectorSelect.value;
        const zonaId = zonaSelect.value;
        const municipioId = this.value;

        if (municipioId) {
          limpiarOpciones(comunidadSelect, "Cargando comunidades...");
          try {
            const response = await fetch(`/obtener-comunidades?sectorId=${sectorId}&zonaId=${zonaId}&municipioId=${municipioId}`);
            const data = await response.json();

            limpiarOpciones(comunidadSelect, "Selecciona una comunidad");
            data.comunidades.forEach(comunidad => {
              const option = new Option(comunidad.nombre_comunidad, comunidad.comunidad_id);
              comunidadSelect.add(option);
            });

            comunidadSelect.disabled = false;
          } catch (error) {
            console.error("Error al cargar comunidades:", error);
          }
        } else {
          limpiarOpciones(comunidadSelect);
          comunidadSelect.disabled = true;
        }

        limpiarOpciones(cctSelect);
        cctSelect.disabled = true;
      });

      // Cargar CCTs cuando se selecciona una Comunidad
      comunidadSelect.addEventListener("change", async function () {
        const sectorId = sectorSelect.value;
        const zonaId = zonaSelect.value;
        const municipioId = municipioSelect.value;
        const comunidadId = this.value;

        if (comunidadId) {
          limpiarOpciones(cctSelect, "Cargando CCTs...");
          try {
            const response = await fetch(`/obtener-ccts?sectorId=${sectorId}&zonaId=${zonaId}&municipioId=${municipioId}&comunidadId=${comunidadId}`);
            const data = await response.json();

            limpiarOpciones(cctSelect, "Selecciona un CCT");
            data.ccts.forEach(cct => {
              const option = new Option(cct.centro_clave_trabajo, cct.cct_id);
              cctSelect.add(option);
            });

            cctSelect.disabled = false;
          } catch (error) {
            console.error("Error al cargar CCTs:", error);
          }
        } else {
          limpiarOpciones(cctSelect);
          cctSelect.disabled = true;
        }
      });
    });


    document.getElementById("formPersonal").addEventListener("submit", (event) => {
      event.preventDefault(); // Evitar que el formulario se envíe directamente
    
      const form = event.target; // Capturamos el formulario
      const formData = new FormData(form); // Creamos un objeto FormData
    
      // Log para inspeccionar cada campo que se está enviando
      console.log("=== Datos enviados desde el formulario ===");
      formData.forEach((value, key) => {
        console.log(`${key}: ${value}`);
      });
    
      // Opcional: Si estás haciendo fetch para enviar la solicitud manualmente
      fetch(form.action, {
        method: form.method,
        body: formData,
      })
        .then((response) => {
          if (!response.ok) {
            throw new Error("Error en el envío");
          }
          return response.text(); // Depende de lo que devuelva el backend
        })
        .then((data) => console.log("Respuesta del servidor:", data))
        .catch((error) => console.error("Error en la solicitud:", error));
    });

    document.getElementById('form-laboral').addEventListener('submit', async (event) => {
      event.preventDefault(); // Evitar el envío por defecto
    
      // Obtener los datos de ambos formularios
      const formPersonal = new FormData(document.getElementById('form-personal'));
      const formLaboral = new FormData(document.getElementById('form-laboral'));
    
      // Combinar los datos de ambos formularios
      for (const [key, value] of formLaboral.entries()) {
        formPersonal.append(key, value);
      }
    
      try {
        const response = await fetch('/personal/agregar', {
          method: 'POST',
          body: formPersonal,
        });
    
        const result = await response.text();
        console.log('Respuesta del servidor:', result);
    
        if (response.ok) {
          alert('Datos enviados correctamente');
        } else {
          alert('Error al enviar datos');
        }
      } catch (error) {
        console.error('Error:', error);
        alert('Error al enviar los datos.');
      }
    });
    
</script>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    const formPersonal = document.getElementById("form-personal");
    const formLaboral = document.getElementById("form-laboral");
    const generoSelect = document.querySelector('select[name="sexo"]'); // Selector de género
    const imagenInput = formPersonal.querySelector('input[type="file"]'); // Selector para el input de imagen
    const imagenCampo = document.getElementById("imagen"); // Campo oculto para la imagen
    
    formLaboral.addEventListener("submit", (event) => {
      event.preventDefault(); // Evitar el envío directo del formulario
      
      // Obtener datos de ambos formularios
      const datosPersonal = new FormData(formPersonal);
      const datosLaboral = new FormData(formLaboral);
      
      // Verificar si se ha subido una imagen
      if (imagenInput.files.length > 0) {
        // Si se sube una imagen, agregarla a los datos personales
        datosPersonal.append("imagen", imagenInput.files[0]);
      } else {
        // Si no se sube imagen, asignar la imagen predeterminada por género
        let imagenPredeterminada = "";
        if (generoSelect.value === "Masculino") {
          imagenPredeterminada = "/images/avatars/avatar-default.png"; // Avatar masculino por defecto
        } else if (generoSelect.value === "Femenino") {
          imagenPredeterminada = "/images/avatars/avatar-mujer-default.png"; // Avatar femenino por defecto
        } else {
          imagenPredeterminada = "/images/avatars/01.png"; // Imagen por defecto si no se selecciona género
        }
        datosPersonal.append("imagen", imagenPredeterminada); // Asignar imagen predeterminada
      }
      
      // Combinar los datos en un solo objeto
      const datosCompletos = {};
      for (const [key, value] of datosPersonal.entries()) {
        datosCompletos[key] = value;
      }
      for (const [key, value] of datosLaboral.entries()) {
        datosCompletos[key] = value;
      }
  
      // Mostrar SweetAlert con un mensaje simple
      Swal.fire({
        title: '¿Estás seguro que los datos están correctos?',
        text: 'Si todo es correcto, puedes enviar los datos. Si necesitas hacer cambios, haz clic en "Editar".',
        icon: 'question',
        showCancelButton: true,
        confirmButtonText: 'Sí, enviar',
        cancelButtonText: 'Editar',
        reverseButtons: true
      }).then(async (result) => {
        if (result.isConfirmed) {
          const datosFinales = new FormData(formPersonal);
          const datosLaboral = new FormData(formLaboral);
      
          // Combinar los datos finales en FormData
          for (const [key, value] of datosLaboral.entries()) {
            datosFinales.append(key, value);
          }
      
          try {
            const response = await fetch('/personal/agregar', {
              method: 'POST',
              body: datosFinales,
            });
      
            const result = await response.text();
            console.log('Respuesta del servidor:', result);
      
            if (response.ok) {
              Swal.fire({
                title: '¡Registro agregado exitosamente!',
                text: '¿Qué deseas hacer ahora?',
                icon: 'success',
                showCancelButton: true,
                confirmButtonText: 'Agregar otro',
                cancelButtonText: 'Volver al inicio',
              }).then((result) => {
                if (result.isConfirmed) {
                  // Reiniciar formularios para agregar otro registro
                  formPersonal.reset();
                  formLaboral.reset();
                } else {
                  // Redirigir al inicio
                  window.location.href = '/lista-panel-adm';
                }
              });
            } else {
              Swal.fire({
                title: 'Error al registrar',
                text: 'Hubo un problema al enviar los datos. Por favor, intenta de nuevo.',
                icon: 'error',
                confirmButtonText: 'Aceptar',
              });
            }
          } catch (error) {
            console.error('Error:', error);
            Swal.fire({
              title: 'Error crítico',
              text: 'Hubo un problema en la solicitud. Revisa la consola para más detalles.',
              icon: 'error',
              confirmButtonText: 'Aceptar',
            });
          }
        } else if (result.dismiss === Swal.DismissReason.cancel) {
          // Si el usuario decide editar, no hacer nada o cerrar el modal
          console.log('El usuario desea editar los datos');
        }
      });
    });
  });
  
  
  
</script>