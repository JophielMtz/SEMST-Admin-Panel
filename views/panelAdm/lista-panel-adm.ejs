

<div class="container-fluid content-inner mt-n5 py-0">
  <div class="row">
      <div class="col-sm-12">
          <div class="card">
              <div class="container text-center">
                  <h4 class="text-responsive mb-3 mt-3">Personal</h4>
                  <div class="row justify-content-center gx-2" 
                  <<% if (role !== 'admin' && role !== 'super-admin') { %> style="display: none;" <% } %> 

                  <!-- Botón Nuevo -->
                  <div class="col-auto">
                      <button type="button" class="btn btn-primary rounded-pill w-auto"
                          data-bs-toggle="modal" data-bs-target="#nuevoRegistroModal" data-action="nuevo"
                          style="padding: 4px 12px; font-size: 12px;" class="btn-sm">
                          Nuevo
                      </button>
                  </div>
              
                  <!-- Botón Activar Edición -->
                  <div class="col-auto">
                      <button id="toggleEditMode" class="btn btn-primary rounded-pill w-auto"
                          style="padding: 4px 12px; font-size: 12px;">
                          <i class="fas fa-edit me-1"></i> Activar Edición
                      </button>
                  </div>
              </div>
              </div>

              <div class="card-body">
                <div class="mb-3 mt-4 col-10 d-flex justify-content-center align-items-center mx-auto">
                  <input type="text" class="form-control" id="searchInput" placeholder="Buscar personal..." />
                </div>           
                <div class="test-container">
                    <div id="myGrid" class="ag-theme-quartz" style="width: 100%"></div>
                </div>
              </div>
          </div>
      </div>
  </div>
</div>


<!--Crear-->
<script type="module">
  import {getStatusClass,statusRenderer,funcionPost,editarCelda,createValidatedValueSetter,createSelectColumnProps,borrarColumna,} from "./js/AgGrid/config.js";
  import * as Columnas from "./js/AgGrid/columNames.js";

  let gridApi;
  let editMode = false;




  const notyf = new Notyf();

  class ImageRenderer {
    eGui;

    init(params) {
      const personalImage = document.createElement("img");

      if (params.value) {
        personalImage.src = `/uploads/${params.value}`;
      } else {
        personalImage.src = "/images/avatars/avatar-default.png"; // Imagen predeterminada
      }

      personalImage.setAttribute(
        "style",
        "display: block; width: 50px; height: 50px; border-radius: 50%; margin: auto;"
      );

      this.eGui = personalImage;
    }

    getGui() {
      return this.eGui;
    }

    refresh(params) {
      return false;
    }
  }

  const datos = [
    Columnas.Perfil,
    {field: "personal_id",headerName: "ID",width: 60,editable: false,cellClass: "centrar-celda",},
    {field: "imagen",headerName: "Imagen",width: 100,editable: false,cellRenderer: ImageRenderer,cellClass: "centrar-celda",},
    {field: "nombre",headerName: "Nombre",width: 300,editable: () => editMode,cellClass: "centrar-celda",filter: "agTextColumnFilter",},
    {field: "edad",headerName: "Edad",width: 70,wrapHeaderText: true,cellClass: "centrar-celda",},
    {field: "rfc",headerName: "RFC",width: 150,editable: false,cellClass: "centrar-celda", },
    {...Columnas.antiguedad(),field:"antiguedad_compacta", headerName: "Antiguedad"},
    {field: "cargo",headerName: "cargo",editable: () => editMode,cellClass: "centrar-celda",width: 180,},
    {...Columnas.cctSale(),field:"nombre_cct", headerName: "CCT"},
    {...Columnas.antiguedad(),field:"tipo_organizacion", headerName:"Tipo Org.",  width: 150,},
    {...Columnas.antiguedad(),field:"z_e", headerName:"Z.E",  width: 80,}
  ];

  const gridOptions = {
    columnDefs: datos,
    defaultColDef: { editable: true, resizable: true },
    cellStyle: { textAlign: "center" },
    filter: true, // Habilita filtros por defecto
    pagination: true,
    paginationPageSize: 20,
    cacheBlockSize: 10,
    rowData: null,
    rowHeight: 75,
    domLayout: "autoHeight",
    context: {
      endpoint: "/editarListaPanelAdm",
    },
    onCellValueChanged: editarCelda,
  };



  const columnVisibilityConfig = {
    cctsSaleEntra: [
        "nombre_docente",
        "fecha",
        "estatus",
        "municipio_sale",
        "cct_sale",
        "estatus_cubierta",
        "municipio_entra",
        "cct_entra",
    ],
    funcionDelete: [
    "Accion",
    "np",
        "nombre_docente",
        "fecha",
        "estatus",
        "situacion",
        "antiguedad",
        "municipio_sale",
        "comunidad_sale",
        "cct_sale",
        "estatus_cubierta",
        "observaciones",
        "municipio_entra",
        "comunidad_entra",
        "cct_entra",

    ],
    all: [
        "Accion",
        "personal_id",
        "nombre",
        "imagen",
        "cargo",
        "edad",
        "rfc",
        "correo",
        "curp",
        "telefono",
        "estatus_cubierta",
        "observaciones",
        "municipio_entra",
        "comunidad_entra",
        "cct_entra",
    ],
};







  const initializeGrid = async () => {
    const gridDiv = document.querySelector("#myGrid");
    gridApi = agGrid.createGrid(gridDiv, gridOptions);

    try {
      // Obtén los datos desde el backend
      const data = await fetch("/getlistaPanelAdm").then((response) =>
        response.json()
      );

      // Agrega el campo `tabla` dinámicamente
      const rowData = data.map((row) => ({
        ...row,
        tabla: "personal", // Nombre de la tabla a la que pertenece esta fila
      }));

      // Asigna los datos al grid
      gridApi.setGridOption("rowData", rowData); 
    } catch (error) {
      console.error("Error inicializando la tabla:", error);
    }
  };

  document
    .querySelector("#toggleEditMode")
    .addEventListener("click", async () => {
      if (editMode) {
        if (confirm("¿Estás seguro de los cambios?")) {
          editMode = false;
          const button = document.querySelector("#toggleEditMode");
          button.innerHTML = '<i class="fas fa-edit me-2"></i>Activar Edición';
          gridApi.refreshCells({ force: true }); // Refrescar las celdas

          // Recargar datos desde el servidor
          await reloadData();
        }
      } else {
        editMode = true;
        const button = document.querySelector("#toggleEditMode");
        button.innerHTML = '<i class="fas fa-times me-2"></i>Finalizar Edición';
        gridApi.refreshCells({ force: true }); // Refrescar las celdas para aplicar edición
      }
    });

  document.addEventListener("DOMContentLoaded", initializeGrid);

  const searchInput = document.getElementById('searchInput');

// Evento para capturar la entrada del usuario
searchInput.addEventListener('input', function () {
  if (gridApi) { // Verifica que gridApi esté lista
    const filterText = searchInput.value;

    // Aplica el filtro solo a la columna "nombre"
    gridApi.setFilterModel({
      nombre: {
        type: 'contains', // Tipo de coincidencia: "contiene"
        filter: filterText // Texto ingresado
      }
    });

    // Refresca los filtros para aplicar los cambios
    gridApi.onFilterChanged();
  }
});

  

;
</script>
