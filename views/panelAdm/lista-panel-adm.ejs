<div class="container-fluid content-inner mt-n5 py-0">
  <div class="row">
      <div class="col-sm-12">
          <div class="card">
              <div class="container text-center">
                  <h4 class="text-responsive mb-3 mt-3">Personal</h4>
                  <div class="row justify-content-center gx-2" 
                  <<% if (role !== 'admin' && role !== 'super-admin') { %> style="display: none;" <% } %> 

                  <!-- Botón Nuevo -->
                  <div class="col-auto">
                      <button type="button" class="btn btn-primary rounded-pill w-auto"
                          data-bs-toggle="modal" data-bs-target="#nuevoRegistroModal" data-action="nuevo"
                          style="padding: 4px 12px; font-size: 12px;" class="btn-sm">
                          Nuevo
                      </button>
                  </div>
              
                  <!-- Botón Activar Edición -->
                  <div class="col-auto">
                      <button id="toggleEditMode" class="btn btn-primary rounded-pill w-auto"
                          style="padding: 4px 12px; font-size: 12px;">
                          <i class="fas fa-edit me-1"></i> Activar Edición
                      </button>
                  </div>
              
             
             
              </div>
              
                  
              </div>
              <div class="card-body">
                  <div class="test-container">
                      <div class="test-header d-flex align-items-center">
                          <!-- Radio para 'Todos' -->
                          <div class="form-check form-check-inline">
                              <input type="radio" class="form-check-input" name="filter" id="all" onchange="externalFilterChanged('all')" checked>
                              <label for="all" class="form-check-label pl-2">Todos</label>
                          </div>
                          <div class="form-check form-check-inline">
                              <input type="radio" class="form-check-input" name="filter" id="cctsSaleEntra" onchange="externalFilterChanged('cctsSaleEntra')">
                              <label for="cctsSaleEntra" class="form-check-label pl-2">CCTs sale y entra</label>
                          </div>
                          <% if (role === 'admin' || role === 'super-admin') { %>
                              <div class="form-check form-check-inline">
                                  <input type="radio" class="form-check-input" name="filter" id="funcionDelete" onchange="externalFilterChanged('funcionDelete')">
                                  <label for="funcionDelete" class="form-check-label pl-2">Borrar entradas</label>
                              </div>
                          <% } %>
                          
                          
                      </div>
                      <div id="myGrid" class="ag-theme-quartz" style="width: 100%"></div>
                  </div>
              </div>
          </div>
      </div>
  </div>
</div>

<!-- Modal de Perfil -->
<div class="modal fade" id="profileModal" tabindex="-1" aria-labelledby="profileModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="profileModalLabel">Perfil de Personal</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body" id="profileContent">
        <!-- Los datos del perfil se insertarán aquí -->
        <p><strong>Nombre:</strong> <span id="personalName"></span></p>
        <p><strong>Edad:</strong> <span id="personalAge"></span></p>
        <p><strong>Correo:</strong> <span id="personalEmail"></span></p>
        <!-- Agrega más campos según sea necesario -->
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
      </div>
    </div>
  </div>
</div>




<!--Crear-->
<script type="module">
  import {
    getStatusClass,
    statusRenderer,
    funcionPost,
    editarCelda,
    createValidatedValueSetter,
    createSelectColumnProps,
    borrarColumna,
  } from "./js/AgGrid/config.js";

  let gridApi;
  let editMode = false;

  const notyf = new Notyf();

  class ImageRenderer {
    eGui;

    init(params) {
      const personalImage = document.createElement("img");

      if (params.value) {
        personalImage.src = `/uploads/${params.value}`;
      } else {
        personalImage.src = "/images/avatars/avatar-default.png"; // Imagen predeterminada
      }

      personalImage.setAttribute(
        "style",
        "display: block; width: 50px; height: 50px; border-radius: 50%; margin: auto;"
      );

      this.eGui = personalImage;
    }

    getGui() {
      return this.eGui;
    }

    refresh(params) {
      return false;
    }
  }

  const datos = [
  {
      field: "Accion",
      headerName: "Ver perfil",
      width: 100,
      editable: false,
      cellClass: "centrar-celda",
      cellRenderer: (params) => {
        if (!params.data || !params.data.personal_id) {
          return null;
        }

        // Crear el contenedor que mantendrá ambos botones
        const actionContainer = document.createElement("div");
        actionContainer.className = "d-flex"; // Usar flexbox para alinear los botones

        // Primer botón: Ver Perfil
        const viewProfileButton = document.createElement("a");
        viewProfileButton.className = "btn btn-sm btn-icon text-primary me-4";
        viewProfileButton.setAttribute("data-bs-toggle", "tooltip");
        viewProfileButton.setAttribute("title", "Ver Perfil");
        viewProfileButton.style.cursor = "pointer";

        viewProfileButton.innerHTML = `
        <span class="btn-inner">
          <!-- Primer SVG con margen a la derecha (me-2) -->
                                          <svg class="icon-32" width="32" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">                                    <path fill-rule="evenodd" clip-rule="evenodd" d="M11.9849 15.3462C8.11731 15.3462 4.81445 15.931 4.81445 18.2729C4.81445 20.6148 8.09636 21.2205 11.9849 21.2205C15.8525 21.2205 19.1545 20.6348 19.1545 18.2938C19.1545 15.9529 15.8735 15.3462 11.9849 15.3462Z" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path>                                    <path fill-rule="evenodd" clip-rule="evenodd" d="M11.9849 12.0059C14.523 12.0059 16.5801 9.94779 16.5801 7.40969C16.5801 4.8716 14.523 2.81445 11.9849 2.81445C9.44679 2.81445 7.3887 4.8716 7.3887 7.40969C7.38013 9.93922 9.42394 11.9973 11.9525 12.0059H11.9849Z" stroke="currentColor" stroke-width="1.42857" stroke-linecap="round" stroke-linejoin="round"></path>                                </svg>                            
        </span>
      `;


      viewProfileButton.addEventListener("click", async () => {
        const personalId = params.data.personal_id;
    
        try {
            // Hacer una solicitud para obtener los detalles del perfil
            const response = await fetch(`/getlistaPanelAdm/${personalId}`);
            if (response.ok) {
                const profileData = await response.json();
    
                // Modificar el enlace para redirigir al perfil
                const profileLink = `/perfil/${personalId}`;
                window.location.href = profileLink;  // Redirigir a la nueva página con el perfil
            } else {
                alert("No se pudo obtener el perfil.");
            }
        } catch (error) {
            alert("Error al obtener el perfil.");
        }
    });
    

        // Segundo botón: Eliminar Personal
        const deleteButton = document.createElement("a");
        deleteButton.className = "btn btn-sm btn-icon text-primary";
        deleteButton.setAttribute("data-bs-toggle", "tooltip");
        deleteButton.setAttribute("title", "Eliminar Personal");
        deleteButton.style.cursor = "pointer";

        deleteButton.innerHTML = `
        <!-- <span class="btn-inner">
          <svg class="icon-20" width="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" stroke="currentColor">
            <path d="M19.3248 9.46826C19.3248 9.46826 18.7818 16.2033 18.4668 19.0403C18.3168 20.3953 17.4798 21.1893 16.1088 21.2143C13.4998 21.2613 10.8878 21.2643 8.27979 21.2093C6.96079 21.1823 6.13779 20.3783 5.99079 19.0473C5.67379 16.1853 5.13379 9.46826 5.13379 9.46826" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path>
            <path d="M20.708 6.23975H3.75" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path>
            <path d="M17.4406 6.23973C16.6556 6.23973 15.9796 5.68473 15.8256 4.91573L15.5826 3.69973C15.4326 3.13873 14.9246 2.75073 14.3456 2.75073H10.1126C9.53358 2.75073 9.02558 3.13873 8.87558 3.69973L8.63258 4.91573C8.47858 5.68473 7.80258 6.23973 7.01758 6.23973" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round"></path>
          </svg>
        </span> -->
      `;

        // Lógica del evento de Eliminar Personal
        deleteButton.addEventListener("click", async () => {
          const result = await Swal.fire({
            title: "¿Deseas eliminar este personal?",
            text: "Esta acción no se puede deshacer.",
            icon: "warning",
            showCancelButton: true,
            confirmButtonText: "Sí, eliminar",
            cancelButtonText: "Cancelar",
            reverseButtons: true,
          });

          if (result.isConfirmed) {
            try {
              const personalId = params.data.personal_id;

              const response = await fetch("/deletePersonal", {
                method: "DELETE",
                headers: {
                  "Content-Type": "application/json",
                },
                body: JSON.stringify({ personal_id: personalId }),
              });

              if (response.ok) {
                params.api.applyTransaction({ remove: [params.node.data] });

                notyf.success({
                  message: "Personal eliminado exitosamente",
                  duration: 2000,
                  position: { x: "right", y: "top" },
                });
              } else {
                const error = await response.json();
                alert(`Error: ${error.message}`);
              }
            } catch {
              alert("Error al comunicarse con el servidor.");
            }
          }
        });

        // Agregar los botones al contenedor
        actionContainer.appendChild(viewProfileButton);
        actionContainer.appendChild(deleteButton);

        // Retornar el contenedor con ambos botones
        return actionContainer;
      },
    },
    {
      field: "personal_id",
      headerName: "ID",
      width: 70,
      editable: false,
      cellClass: "centrar-celda",
    },
    {
      field: "imagen",
      headerName: "Imagen",
      width: 100,
      editable: false,
      cellRenderer: ImageRenderer,
      cellClass: "centrar-celda",
    },
    {
      field: "nombre",
      headerName: "Nombre",
      width: 300,
      editable: () => editMode,
      cellClass: "centrar-celda",
      filter: "agTextColumnFilter",
    
    },
    {
      field: "edad",
      headerName: "Edad",
      width: 70,
      wrapHeaderText: true,
      cellClass: "centrar-celda",
    },
    {
      field: "telefono",
      headerName: "Teléfono",
      editable: () => editMode,
      minWidth: 100,
      wrapHeaderText: true,
      cellClass: "centrar-celda",
    },
    {
      field: "correo",
      headerName: "Correo",
      editable: () => editMode,
      minWidth: 200,
      wrapHeaderText: true,
      cellClass: "centrar-celda",
    },
    {
      field: "rfc",
      headerName: "RFC",
      width: 150,
      editable: false,
      cellClass: "centrar-celda",
    },
    {
      field: "cargo",
      headerName: "cargo",
      editable: () => editMode,
      cellClass: "centrar-celda",
    },
   
  ];

  const gridOptions = {
    columnDefs: datos,
    defaultColDef: { editable: true, resizable: true },
    cellStyle: { textAlign: "center" },
    filter: true, // Habilita filtros por defecto
    pagination: true,
    paginationPageSize: 20,
    cacheBlockSize: 10,
    rowData: null,
    rowHeight: 75,
    domLayout: "autoHeight",
    context: {
      endpoint: "/editarListaPanelAdm",
    },
    onCellValueChanged: editarCelda,
  };



  const columnVisibilityConfig = {
    cctsSaleEntra: [
        "nombre_docente",
        "fecha",
        "estatus",
        "municipio_sale",
        "cct_sale",
        "estatus_cubierta",
        "municipio_entra",
        "cct_entra",
    ],
    funcionDelete: [
    "Accion",
    "np",
        "nombre_docente",
        "fecha",
        "estatus",
        "situacion",
        "antiguedad",
        "municipio_sale",
        "comunidad_sale",
        "cct_sale",
        "estatus_cubierta",
        "observaciones",
        "municipio_entra",
        "comunidad_entra",
        "cct_entra",

    ],
    all: [
        "Accion",
        "personal_id",
        "nombre",
        "imagen",
        "cargo",
        "edad",
        "rfc",
        "correo",
        "curp",
        "telefono",
        "estatus_cubierta",
        "observaciones",
        "municipio_entra",
        "comunidad_entra",
        "cct_entra",
    ],
};

window.externalFilterChanged = function (filterType) {
    if (!gridApi) {
        console.error("Grid API no está inicializado.");
        return;
    }

    if (filterType in columnVisibilityConfig) {
        const columnsToShow = columnVisibilityConfig[filterType];

        if (columnsToShow) {
            const allColumns = gridOptions.columnDefs.map((colDef) =>
                colDef.field ? colDef.field : null
            );

            const columnsToHide = allColumns.filter(
                (col) => col && !columnsToShow.includes(col)
            );

            columnsToHide.forEach((col) => gridApi.setColumnVisible(col, false));
            columnsToShow.forEach((col) => gridApi.setColumnVisible(col, true));
        } else {
            gridOptions.columnDefs.forEach((colDef) => {
                gridApi.setColumnVisible(colDef.field, true);
            });
        }
    } else {
        console.warn(`Tipo de filtro desconocido: ${filterType}`);
    }
};





  const initializeGrid = async () => {
    const gridDiv = document.querySelector("#myGrid");
    gridApi = agGrid.createGrid(gridDiv, gridOptions);

    try {
      // Obtén los datos desde el backend
      const data = await fetch("/getlistaPanelAdm").then((response) =>
        response.json()
      );

      // Agrega el campo `tabla` dinámicamente
      const rowData = data.map((row) => ({
        ...row,
        tabla: "personal", // Nombre de la tabla a la que pertenece esta fila
      }));

      // Asigna los datos al grid
      gridApi.setGridOption("rowData", rowData); 
      externalFilterChanged("all");
    } catch (error) {
      console.error("Error inicializando la tabla:", error);
    }
  };

  document
    .querySelector("#toggleEditMode")
    .addEventListener("click", async () => {
      if (editMode) {
        if (confirm("¿Estás seguro de los cambios?")) {
          editMode = false;
          const button = document.querySelector("#toggleEditMode");
          button.innerHTML = '<i class="fas fa-edit me-2"></i>Activar Edición';
          gridApi.refreshCells({ force: true }); // Refrescar las celdas

          // Recargar datos desde el servidor
          await reloadData();
        }
      } else {
        editMode = true;
        const button = document.querySelector("#toggleEditMode");
        button.innerHTML = '<i class="fas fa-times me-2"></i>Finalizar Edición';
        gridApi.refreshCells({ force: true }); // Refrescar las celdas para aplicar edición
      }
    });

  document.addEventListener("DOMContentLoaded", initializeGrid);
</script>
