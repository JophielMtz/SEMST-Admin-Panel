<div class="conatiner-fluid content-inner mt-n5 py-0">
    <div class="row">
        <div class="">
            <div class="card">
                <!-- Botón para abrir el modal -->
                <div class="card-header d-flex justify-content-between flex-wrap">
                    <div class="header-title">
                        <h4 class="card-title mb-0">Roles y Permisos</h4>
                    </div>
                    <div class="">
                        <!-- Botón para activar el modal -->
                        <a href="/registrar" class="btn btn-primary btn-icon mt-lg-0 mt-md-0 mt-3"
                            data-bs-toggle="modal" data-bs-target="#staticBackdrop">
                            <i class="btn-inner">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24"
                                    stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                        d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                                </svg>
                            </i>
                            <span>Agregar usuario</span>
                        </a>
                    </div>
                </div>

                <!-- Modal para agregar nuevo usuario -->
                <div class="modal fade" id="staticBackdrop" data-bs-backdrop="static" data-bs-keyboard="false"
                    tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
                    <div class="modal-dialog col-lg-8">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="staticBackdropLabel">Agregar nuevo usuario</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal"
                                    aria-label="Cerrar"></button>
                            </div>
                            <div class="modal-body">
                                <form id="registrarForm" action="/registrar" method="POST"
                                    enctype="multipart/form-data">
                                    <!-- Imagen de perfil -->
                                    <div class="d-flex justify-content-center align-items-center mb-4">
                                        <div class="profile-img-edit position-relative">
                                            <img id="profile-img" src="/images/avatars/01.png" alt="profile-pic"
                                                class="theme-color-default-img profile-pic rounded avatar-100">
                                            <div class="upload-icone bg-primary">
                                                <label for="file-upload" style="cursor: pointer;">
                                                    <svg class="upload-button icon-14" width="14" viewBox="0 0 24 24">
                                                        <path fill="#ffffff"
                                                            d="M14.06,9L15,9.94L5.92,19H5V18.08L14.06,9M17.66,3C17.41,3 17.15,3.1 16.96,3.29L15.13,5.12L18.88,8.87L20.71,7.04C21.1,6.65 21.1,6 20.71,5.63L18.37,3.29C18.17,3.09 17.92,3 17.66,3M14.06,6.19L3,17.25V21H6.75L17.81,9.94L14.06,6.19Z" />
                                                    </svg>
                                                </label>
                                                <input id="file-upload" class="file-upload" type="file" accept="image/*"
                                                    name="imagen" onchange="previewImage(event)" style="display: none;">
                                            </div>
                                        </div>
                                    </div>

                                    <!-- Nombre de usuario -->
                                    <div class="form-group">
                                        <label class="form-label" for="usuario">Nombre de Usuario:</label>
                                        <input type="text" class="form-control" id="usuario" name="usuario"
                                            placeholder="Ingrese el nombre de usuario" required>
                                    </div>

                                    <!-- Apellido -->
                                    <div class="form-group">
                                        <label class="form-label" for="apellido">Apellido:</label>
                                        <input type="text" class="form-control" id="apellido" name="apellido"
                                            placeholder="Ingrese el apellido" required>
                                    </div>

                                    <!-- Correo Electrónico -->
                                    <div class="form-group">
                                        <label class="form-label" for="email">Correo Electrónico:</label>
                                        <input type="email" class="form-control" id="email" name="email"
                                            placeholder="Ingrese el correo electrónico" required>
                                    </div>

                                    <!-- Rol -->
                                    <div class="form-group">
                                        <label class="form-label" for="rol">Rol:</label>
                                        <select name="rol" id="rol" class="form-control" required>
                                            <option value="" disabled selected>Selecciona un rol</option>
                                            <option value="Admin">Administrador</option>
                                            <option value="usuario">Usuario</option>
                                        </select>
                                    </div>

                                    <!-- Contraseña -->
                                    <div class="form-group">
                                        <label class="form-label" for="password">Contraseña:</label>
                                        <input type="password" class="form-control" id="password" name="password"
                                            placeholder="Ingrese la contraseña" required>
                                    </div>

                                    <!-- Confirmar Contraseña -->
                                    <div class="form-group">
                                        <label class="form-label" for="confirmar-password">Confirmar Contraseña:</label>
                                        <input type="password" class="form-control" id="confirmar-password"
                                            name="confirmar-password" placeholder="Confirmar la contraseña" required>
                                    </div>

                                    <!-- Botones -->
                                    <div class="text-start mt-2">
                                        <button type="submit" class="btn btn-primary">Guardar</button>
                                        <button type="button" class="btn btn-danger" data-bs-dismiss="modal"
                                            aria-label="Cerrar">Cancelar</button>
                                    </div>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="card-body">
                    <div class="table-responsive">
                      <table class="table table-bordered">
                        <thead>
                          <tr>
                            <th class="text-center">Nombre</th>
                            <th class="text-center">Correo</th>
                            <th class="text-center">Administrador</th>
                            <th class="text-center">Usuario</th>
                            <th class="text-center">Acción</th>
                          </tr>
                        </thead>
                        <tbody>
                          <% roles.forEach((usuario) => { %>
                            <tr>
                              <td class="text-center"><%= usuario.nombre %></td>
                              <td class="text-center"><%= usuario.correo %></td>
                              <td class="text-center">
                                <input class="form-check-input admin-checkbox" type="checkbox" 
                                       <%= usuario.rol === 'admin' ? 'checked' : '' %> 
                                       data-id="<%= usuario.id %>" data-role="admin">
                              </td>
                              <td class="text-center">
                                <input class="form-check-input user-checkbox" type="checkbox" 
                                       <%= usuario.rol === 'usuario' ? 'checked' : '' %> 
                                       data-id="<%= usuario.id %>" data-role="usuario">
                              </td>
                              <td class="text-center">
                                <i 
                                  class="fas fa-trash-alt delete-btn text-muted" 
                                  data-id="<%= usuario.id %>" 
                                  data-name="<%= usuario.nombre %>" 
                                  data-table="roles" 
                                  style="cursor: pointer;" 
                                  data-bs-toggle="tooltip" 
                                  title="Eliminar usuario"></i>
                              </td>
                            </tr>
                          <% }); %>
                        </tbody>
                      </table>
                      <div class="text-center">
                        <button id="guardar-cambios" type="button" class="btn btn-primary">Guardar</button>
                      </div>
                      
                    </div>
                  </div>
            </div>
        </div>
    </div>
</div>

<script>
    // Función para eliminar un usuario
    document.querySelectorAll('.delete-btn').forEach((deleteBtn) => {
      deleteBtn.addEventListener('click', async function() {
        const userId = this.getAttribute('data-id'); // Obtener el ID del usuario a eliminar
  
        // Confirmar si el usuario realmente quiere eliminarlo
        const confirmDelete = confirm("¿Estás seguro de que deseas eliminar este usuario?");
        if (!confirmDelete) {
          return; // Si no se confirma, no hacemos nada
        }
  
        // Eliminar la fila de la tabla (frontend)
        const row = document.getElementById(`user-${userId}`);
        row.remove(); // Elimina la fila de la tabla
  
        try {
          // Realizar la solicitud de eliminación al servidor
          const response = await fetch(`/deleteUser/${userId}`, {
            method: 'DELETE',
            headers: {
              'Content-Type': 'application/json',
            },
          });
  
          const result = await response.json();
  
          if (!response.ok) {
            alert('Ocurrió un error al eliminar el usuario. Intenta nuevamente.');
          }
        } catch (error) {
          console.error('Error al conectar con el servidor:', error);
          alert('Error al conectar con el servidor. Por favor, revisa tu conexión a Internet.');
        }
      });
    });
  </script>
<!-- image preview -->
<script>
  document.querySelectorAll('.form-check-input').forEach((checkbox) => {
    checkbox.addEventListener('change', function () {
      const row = this.closest('tr');
      const adminCheckbox = row.querySelector('.admin-checkbox');
      const userCheckbox = row.querySelector('.user-checkbox');

      if (this.classList.contains('admin-checkbox') && adminCheckbox.checked) {
        userCheckbox.checked = false;
      }

      if (this.classList.contains('user-checkbox') && userCheckbox.checked) {
        adminCheckbox.checked = false;
      }
    });
  });

  document.getElementById('guardar-cambios').addEventListener('click', async function () {
    const cambios = [];

    document.querySelectorAll('tr').forEach((row) => {
      const adminCheckbox = row.querySelector('.admin-checkbox');
      const userCheckbox = row.querySelector('.user-checkbox');

      if (adminCheckbox && userCheckbox) {
        const userId = adminCheckbox.getAttribute('data-id');
        let newRole;

        if (adminCheckbox.checked) {
          newRole = 'admin';
        } else if (userCheckbox.checked) {
          newRole = 'usuario';
        }

        if (newRole) {
          cambios.push({ id: userId, rol: newRole });
        }
      }
    });

    if (cambios.length === 0) {
      Swal.fire('Sin cambios', 'No se detectaron cambios en los roles de usuario.', 'info');
      return;
    }

    const confirm = await Swal.fire({
      title: '¿Estás seguro?',
      text: '¿Deseas aplicar los cambios realizados?',
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#3085d6',
      cancelButtonColor: '#d33',
      confirmButtonText: 'Sí, guardar cambios',
      cancelButtonText: 'Cancelar',
    });

    if (!confirm.isConfirmed) return;

    try {
      const results = await Promise.all(
        cambios.map(async (cambio) => {
          const response = await fetch('/editarRol', {
            method: 'PATCH',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(cambio),
          });

          const data = await response.json();

          if (!response.ok) {
            throw new Error(data.mensaje || 'Error al actualizar un usuario.');
          }

          return { success: true, id: cambio.id };
        })
      );

      Swal.fire(
        '¡Cambios aplicados!',
        `Se actualizaron correctamente ${results.length} usuarios.`,
        'success'
      );
    } catch (error) {
      Swal.fire('Error', error.message || 'Ocurrió un problema al aplicar los cambios.', 'error');
    }
  });

  function previewImage(event) {
    const file = event.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = function () {
        const output = document.getElementById('profile-img');
        output.src = reader.result;
      };
      reader.readAsDataURL(file);
    }
  }
</script>



<script>
    document.getElementById('registrarForm').addEventListener('submit', function (e) {
        e.preventDefault();  // Prevenir el envío normal del formulario

        // Obtener los valores de la contraseña y confirmación
        const password = document.getElementById('password').value;
        const confirmarPassword = document.getElementById('confirmar-password').value;

        // Verificar que la contraseña tenga al menos 8 caracteres
        if (password.length < 8) {
            Swal.fire({
                title: "Error",
                text: "La contraseña debe tener al menos 8 caracteres.",
                icon: "error"
            });
            return;  // Evita el envío del formulario
        }

        // Verificar que las contraseñas coincidan
        if (password !== confirmarPassword) {
            Swal.fire({
                title: "Error",
                text: "Las contraseñas no coinciden.",
                icon: "error"
            });
            return;  // Evita el envío del formulario
        }

        // Usamos FormData para enviar el formulario en formato multipart/form-data
        let formData = new FormData(this);

        // Enviar los datos como multipart/form-data con el método POST
        fetch('/registrar', {
            method: 'POST',
            body: formData  // Enviamos el objeto FormData, que contiene los datos del formulario
        })
            .then(response => response.json())
            .then(data => {
                if (data.error) {
                    Swal.fire({
                        title: "Error",
                        text: "Hubo un error al registrar el usuario.",
                        icon: "error"
                    });
                } else {
                    // SweetAlert para mostrar el mensaje de éxito
                    Swal.fire({
                        title: "¡Registro Exitoso!",
                        text: "Usuario registrado correctamente. ¿Deseas agregar otro usuario?",
                        icon: "success",
                        showCancelButton: true,
                        confirmButtonText: "Agregar otro usuario",
                        cancelButtonText: "Cerrar",
                    }).then((result) => {
                        if (result.isConfirmed) {
                            // Si el usuario quiere agregar otro, reiniciamos el formulario
                            document.getElementById('registrarForm').reset();
                        } else {
                            // Si se cancela, solo cerramos el modal y recargamos la página
                            var modal = bootstrap.Modal.getInstance(document.getElementById('staticBackdrop'));
                            modal.hide();  // Cierra el modal
                            location.reload();  // Recarga la página
                        }
                    });
                }
            })
            .catch(error => {
                console.error('Error al enviar los datos:', error);
                Swal.fire({
                    title: "Error",
                    text: "Hubo un problema al enviar el formulario.",
                    icon: "error"
                });
            });
    });
</script>

<!--Funcion delete-->
<script>
  document.addEventListener('DOMContentLoaded', function () {
    const tooltipTriggerList = [].slice.call(
      document.querySelectorAll('[data-bs-toggle="tooltip"]')
    );
    tooltipTriggerList.forEach(function (tooltipTriggerEl) {
      new bootstrap.Tooltip(tooltipTriggerEl);
    });

    const deleteButtons = document.querySelectorAll('.delete-btn');

    deleteButtons.forEach((button) => {
      button.addEventListener('click', function () {
        const userId = this.getAttribute('data-id');
        const userName = this.getAttribute('data-name'); // Obtener el nombre del usuario
        const tableName = this.getAttribute('data-table');

        if (!userId || !userName) return;

        Swal.fire({
          title: '¿Estás seguro?',
          text: `¿Deseas eliminar al usuario ${userName}?`,
          icon: 'warning',
          showCancelButton: true,
          confirmButtonColor: '#3085d6',
          cancelButtonColor: '#d33',
          confirmButtonText: 'Sí, eliminar',
          cancelButtonText: 'Cancelar',
        }).then((result) => {
          if (result.isConfirmed) {
            borrarUsuario(userId, tableName, this);
          }
        });
      });
    });

    const borrarUsuario = async (userId, tableName, button) => {
      try {
        const response = await fetch('/deleteUser', {
          method: 'DELETE',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ id: userId, table: tableName }),
        });

        if (response.ok) {
          const data = await response.json();
          const rowToDelete = button.closest('tr');
          if (rowToDelete) rowToDelete.remove();

          Swal.fire('¡Eliminado!', `El usuario ${data.nombre || 'desconocido'} fue eliminado correctamente.`, 'success');
        } else {
          const errorData = await response.json();
          Swal.fire('Error', errorData.mensaje || 'No se pudo eliminar el usuario.', 'error');
        }
      } catch (error) {
        Swal.fire('Error', 'Hubo un problema al eliminar el usuario. Intenta nuevamente.', 'error');
      }
    };
  });

  
</script>
